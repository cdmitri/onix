// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "gatblau",
            "url": "http://onix.gatblau.org/",
            "email": "onix@gatblau.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Checks that Artie's HTTP server is listening on the required port.\nUse a liveliness probe.\nIt does not guarantee the server is ready to accept calls.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Check that Artie's HTTP API is live",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/artefact/{repository-group}/{repository-name}/id/{artefact-id}": {
            "get": {
                "description": "gets meta data about the artefact identified by its id",
                "produces": [
                    "application/json",
                    " application/yaml",
                    " application/xml"
                ],
                "tags": [
                    "Artefacts"
                ],
                "summary": "Get information about the specified artefact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the artefact repository group name",
                        "name": "repository-group",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the artefact repository name",
                        "name": "repository-name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "updates meta data about the artefact identified by its id",
                "tags": [
                    "Artefacts"
                ],
                "summary": "Update information about the specified artefact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the artefact repository group name",
                        "name": "repository-group",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the artefact repository name",
                        "name": "repository-name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the artefact unique identifier",
                        "name": "artefact-id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the artefact information to be updated",
                        "name": "artefact-info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registry.Artefact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/artefact/{repository-group}/{repository-name}/tag/{artefact-tag}": {
            "post": {
                "description": "uploads the artefact file and its seal to the pre-configured backend (e.g. Nexus, etc)",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Artefacts"
                ],
                "summary": "Push an artefact to the configured backend",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the artefact repository group name",
                        "name": "repository-group",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the artefact repository name",
                        "name": "repository-name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the artefact reference name",
                        "name": "tag",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the artefact metadata in JSON base64 encoded string format",
                        "name": "artefact-meta",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "the artefact file part of the multipart message",
                        "name": "artefact-file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "the seal file part of the multipart message",
                        "name": "artefact-seal",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "423": {
                        "description": "Locked",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/repository/{repository-group}/{repository-name}": {
            "get": {
                "description": "gets meta data about artefacts in the specified repository",
                "produces": [
                    "application/json",
                    " application/yaml",
                    " application/xml"
                ],
                "tags": [
                    "Artefacts"
                ],
                "summary": "Get information about the artefacts in a repository",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the artefact repository group name",
                        "name": "repository-group",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the artefact repository name",
                        "name": "repository-name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "registry.Artefact": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "file_ref": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.4",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Artie: the generic artefact manager API",
	Description: "Artie's HTTP API for artefact backends.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
