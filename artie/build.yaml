# Artie's Build File
# It contains the instructions to build artie using itself
# No need for make, can run on windows, linux or mac providing the commands in the profiles or functions are compatible
---
application: artie
type: golang
license: Apache Version 2
labels:
  author: gatblau
  application: artie
  description: build, package, sign and publish application artefacts in a generic format as if they were docker images.
  architecture: amd64
env:
  CGO_ENABLED: 0
  GOARCH: amd64
  REPO_NAME: quay.io/gatblau
  ARTIE_REGISTRY: art-registry
  ARTIE_KUBE: art-kube
  ARTIE_IMG_BUILDER: art-buildah
  ARTIE_JAVA_BUILDER: art-java
  ARTIE_PYTHON_BUILDER: art-python
  ARTIE_NODE_BUILDER: art-node
  ARTIE_GO_BUILDER: art-go
  SONAR_SCANNER: art-sonar
  APP_VERSION: 0.0.4
#  alpha: Alpha release, typically used for work-in-progress and experimentation
#  beta: Beta release, typically one that is feature complete for the next planned release, but may contain known bugs.
#  rc: Release candidate, typically a release that's potentially final (stable) unless significant bugs emerge.
  LIFECYCLE_STAGE: alpha
profiles:
  - name: linux
    default: true
    labels:
      platform: linux
    env:
      GOOS: linux
    run:
      - $(build-linux)
    target: images/bin/output/artie-linux-${APP_VERSION}-${ART_REF}-${LIFECYCLE_STAGE}
functions:
  - name: build
    description: build artie binary in all configurations
    run:
      - rm -rf ./images/bin/output
      - $(build-linux)
      - $(build-windows)

  - name: build-linux
    description: builds the artie binary file for the linux platform
    env:
      GOOS: linux
    run:
      - sh ./images/bin/version.sh ${APP_VERSION}-${ART_REF}-${LIFECYCLE_STAGE}
      - go fmt
      - go build -o images/bin/output/artie-linux-${APP_VERSION}-${ART_REF}-${LIFECYCLE_STAGE} -v

  - name: build-windows
    description: builds the artie binary file for the windows platform
    env:
      GOOS: windows
    run:
      - sh ./images/bin/version.sh ${APP_VERSION}-${ART_REF}
      - go fmt
      - go build -o images/bin/output/artie-windows-${APP_VERSION}-${ART_REF}-${LIFECYCLE_STAGE}.exe -v

  - name: build-art-registry
    description: creates an artie registry service image
    run:
      - docker build -f ./images/art-registry/Dockerfile --build-arg APP_NAME=artie-linux-$((cat ./version)) -t ${REPO_NAME}/${ARTIE_REGISTRY}:$((cat ./version)) .
      - docker tag ${REPO_NAME}/${ARTIE_REGISTRY}:$((cat ./version)) ${REPO_NAME}/${ARTIE_REGISTRY}:latest

  - name: push-art-registry
    description: creates a container image for the snapshot repository
    run:
      - docker push ${REPO_NAME}/${ARTIE_REGISTRY}:$((cat ./version))
      - docker push ${REPO_NAME}/${ARTIE_REGISTRY}:latest

  - name: build-art-kube
    description: creates an artie K8S client image
    run:
      - docker build -f ./images/art-kube/Dockerfile --build-arg APP_NAME=artie-linux-$((cat ./version)) -t ${REPO_NAME}/${ARTIE_KUBE}:$((cat ./version)) .
      - docker tag ${REPO_NAME}/${ARTIE_KUBE}:$((cat ./version)) ${REPO_NAME}/${ARTIE_KUBE}:latest

  - name: push-art-kube
    description: creates a container image for K8S client
    run:
      - docker push ${REPO_NAME}/${ARTIE_KUBE}:$((cat ./version))
      - docker push ${REPO_NAME}/${ARTIE_KUBE}:latest

  - name: build-art-buildah
    description: creates an artie image builder image
    run:
      - docker build -f ./images/art-buildah/Dockerfile --build-arg APP_NAME=artie-linux-$((cat ./version)) -t ${REPO_NAME}/${ARTIE_IMG_BUILDER}:$((cat ./version)) .
      - docker tag ${REPO_NAME}/${ARTIE_IMG_BUILDER}:$((cat ./version)) ${REPO_NAME}/${ARTIE_IMG_BUILDER}:latest

  - name: push-art-buildah
    description: pushes the image builder to the container registry
    run:
      - docker push ${REPO_NAME}/${ARTIE_IMG_BUILDER}:$((cat ./version))
      - docker push ${REPO_NAME}/${ARTIE_IMG_BUILDER}:latest

  - name: build-art-java
    description: creates an artie java builder image
    run:
      - docker build -f ./images/art-java/Dockerfile --build-arg APP_NAME=artie-linux-$((cat ./version)) -t ${REPO_NAME}/${ARTIE_JAVA_BUILDER}:$((cat ./version)) .
      - docker tag ${REPO_NAME}/${ARTIE_JAVA_BUILDER}:$((cat ./version)) ${REPO_NAME}/${ARTIE_JAVA_BUILDER}:latest

  - name: push-art-java
    description: pushes the java builder to the container registry
    run:
      - docker push ${REPO_NAME}/${ARTIE_JAVA_BUILDER}:$((cat ./version))
      - docker push ${REPO_NAME}/${ARTIE_JAVA_BUILDER}:latest

  - name: build-art-sonar
    description: creates a sonar scanner image
    run:
      - docker build -f ./images/art-sonar/Dockerfile -t ${REPO_NAME}/${SONAR_SCANNER}:$((cat ./version)) .
      - docker tag ${REPO_NAME}/${SONAR_SCANNER}:$((cat ./version)) ${REPO_NAME}/${SONAR_SCANNER}:latest

  - name: push-art-sonar
    description: pushes the sonar scanner image to the container registry
    run:
      - docker push ${REPO_NAME}/${SONAR_SCANNER}:$((cat ./version))
      - docker push ${REPO_NAME}/${SONAR_SCANNER}:latest

  - name: build-art-python
    description: creates an artie python builder image
    run:
      - docker build -f ./images/art-python/Dockerfile --build-arg APP_NAME=artie-linux-$((cat ./version)) -t ${REPO_NAME}/${ARTIE_PYTHON_BUILDER}:$((cat ./version)) .
      - docker tag ${REPO_NAME}/${ARTIE_PYTHON_BUILDER}:$((cat ./version)) ${REPO_NAME}/${ARTIE_PYTHON_BUILDER}:latest

  - name: push-art-python
    description: pushes the python builder to the container registry
    run:
      - docker push ${REPO_NAME}/${ARTIE_PYTHON_BUILDER}:$((cat ./version))
      - docker push ${REPO_NAME}/${ARTIE_PYTHON_BUILDER}:latest

  - name: build-art-node
    description: creates an artie node builder image
    run:
      - docker build -f ./images/art-node/Dockerfile --build-arg APP_NAME=artie-linux-$((cat ./version)) -t ${REPO_NAME}/${ARTIE_NODE_BUILDER}:$((cat ./version)) .
      - docker tag ${REPO_NAME}/${ARTIE_NODE_BUILDER}:$((cat ./version)) ${REPO_NAME}/${ARTIE_NODE_BUILDER}:latest

  - name: push-art-node
    description: pushes the node builder to the container registry
    run:
      - docker push ${REPO_NAME}/${ARTIE_NODE_BUILDER}:$((cat ./version))
      - docker push ${REPO_NAME}/${ARTIE_NODE_BUILDER}:latest

  - name: build-art-go
    description: creates an artie golang builder image
    run:
      - docker build -f ./images/art-go/Dockerfile --build-arg APP_NAME=artie-linux-$((cat ./version)) -t ${REPO_NAME}/${ARTIE_GO_BUILDER}:$((cat ./version)) .
      - docker tag ${REPO_NAME}/${ARTIE_GO_BUILDER}:$((cat ./version)) ${REPO_NAME}/${ARTIE_GO_BUILDER}:latest

  - name: push-art-go
    description: pushes the node builder to the container registry
    run:
      - docker push ${REPO_NAME}/${ARTIE_GO_BUILDER}:$((cat ./version))
      - docker push ${REPO_NAME}/${ARTIE_GO_BUILDER}:latest

  - name: release-snapshot
    description: build and push all container images
    run:
      - $(build-linux)
      - $(refresh-base)
      - $(build-art-registry)
      - $(push-art-registry)
      - $(build-art-buildah)
      - $(push-art-buildah)
      - $(build-art-kube)
      - $(push-art-kube)
      - $(build-art-java)
      - $(push-art-java)
      - $(build-art-python)
      - $(push-art-python)
      - $(build-art-node)
      - $(push-art-node)
      - $(build-art-go)
      - $(push-art-go)

  - name: refresh-base
    description: refresh base images used in the builds
    run:
      - docker pull registry.access.redhat.com/ubi8/ubi-minimal
      - docker pull quay.io/gatblau/node
      - docker pull docker.io/centos:7

  - name: swagen
    description: generates/refreshes the OpenAPI specifications for Artie's HTTP API
    run:
      - swag init -d ./server -g server.go
...